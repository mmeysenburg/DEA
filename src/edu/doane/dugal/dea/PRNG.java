package edu.doane.dugal.dea;

import cern.jet.random.engine.MersenneTwister;

/**
 * Singleton class implementing a pseudo-random number generator, based on the
 * Mersenne Twister generator distributed by CERN in their colt library.
 *
 * @author Mark M. Meysenburg
 * @version 12/10/2014
 */
public class PRNG {

    /**
     * Static instance variable holding the one instance of the generator that's
     * allowed to exist.
     */
    private static PRNG instance = null;

    /**
     * Mersenne Twister generator encapsulated by this class.
     */
    private MersenneTwister mersenne = null;

    /**
     * Seed value being used by the current sequence.
     */
    private int seed;

    /**
     * Double representing the shifted range (no negative numbers) that can be
     * generated by the Mersenne Twister generator. Used as a divisor when
     * nextDouble() is called.
     */
    final private static double MERSENNE_RANGE = Integer.MAX_VALUE - ((double) Integer.MIN_VALUE) + 1.0;

    /**
     * Default constructor. Create the underlying Mersenne Twister prng and seed
     * it based on the first number in the java.util.Random prng sequence, as
     * seeded with the default Random constructor.
     */
    private PRNG() {
        java.util.Random r = new java.util.Random();
        seed = r.nextInt();
        mersenne = new MersenneTwister(seed);
    }

    /**
     * Get a reference to the one allowed PRNG object. The default behavior is
     * to get a PRNG seeded with the system time. If you want to manually set
     * the seed value, call setSeed() after calling this method.
     *
     * @return Reference to the single PRNG object that can exist.
     */
    public synchronized static PRNG getInstance() {
        if (instance == null) {
            instance = new PRNG();
        }

        return instance;
    }

    /**
     * Return the next number in the PRNG sequence, as an int in the closed
     * range [Integer.MIN_VALUE, Integer.MAX_VALUE]
     *
     * @return a int in the range [Integer.MIN_VALUE, Integer.MAX_VALUE]
     */
    public int nextInt() {
        return mersenne.nextInt();
    }

    /**
     * Return the next number in the PRNG sequence, as an int in the closed
     * range [lo, hi]. It is assumed that lo is less than or equal to hi.
     *
     * @return a int in the range [lo, hi].
     *
     * @param lo Low int of range.
     * @param hi High int of range.
     */
    public int nextInt(int lo, int hi) {
        return lo + (int) ((hi - lo + 1) * nextDouble());
    }

    /**
     * Get the next double from the PRNG sequence, in the closed range [0, 1].
     *
     * @return a double in the range [0, 1].
     */
    public double nextDouble() {
        double iv = -((double) Integer.MIN_VALUE) + nextInt();
        return iv / MERSENNE_RANGE;
    }

    /**
     * Return the next number in the PRNG sequence, as a double in the closed
     * range [lo, hi]. It is assumed that lo is less than or equal to hi.
     *
     * @return a double in the range [lo, hi]
     *
     * @param lo Low value of PRNG's range.
     * @param hi High value of PRNG's range.
     */
    public double nextDouble(double lo, double hi) {
        return lo + ((hi - lo) * nextDouble());
    }

    /**
     * Re-seed the PRNG with a new value.
     *
     * @param seed New seed value.
     */
    public void setSeed(int seed) {
        this.seed = seed;
        mersenne = new MersenneTwister(seed);
    }

    /**
     * Get the seed value currently being used by this PRNG.
     *
     * @return Seed value used by this PRNG.
     */
    public int getSeed() {
        return seed;
    }
}
